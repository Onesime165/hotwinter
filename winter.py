import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import warnings
from scipy.stats import norm, shapiro, kurtosis, skew
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.tsa.stattools import acf, pacf
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from matplotlib.ticker import FuncFormatter
import io

warnings.filterwarnings("ignore")

# Configuration de la page
st.set_page_config(
    page_title="Analyse S√©rie Temporelle - Holt-Winters",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fonction pour formater les nombres
def format_number(value):
    """Formate les nombres avec s√©parateurs de milliers"""
    if pd.isna(value):
        return "N/A"
    if isinstance(value, (int, float)):
        if abs(value) >= 1e12:
            return f"{value:,.0f}"
        elif abs(value) >= 1e9:
            return f"{value:,.2f}"
        elif abs(value) >= 1:
            return f"{value:,.2f}"
        else:
            return f"{value:.6f}"
    return str(value)

# CSS personnalis√© pour le design sombre et moderne
st.markdown("""
<style>
    /* Background avec effet technologique */
    .stApp {
        background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 50%, #0f1419 100%);
        background-attachment: fixed;
    }
    
    /* Effet de grille en arri√®re-plan */
    .stApp::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
            linear-gradient(rgba(0, 255, 255, 0.03) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0, 255, 255, 0.03) 1px, transparent 1px);
        background-size: 50px 50px;
        pointer-events: none;
        z-index: 0;
    }
    
    /* Animation de pulsation pour les titres */
    @keyframes glow {
        0%, 100% { text-shadow: 0 0 20px rgba(0, 217, 255, 0.5), 0 0 30px rgba(0, 217, 255, 0.3); }
        50% { text-shadow: 0 0 30px rgba(0, 217, 255, 0.8), 0 0 40px rgba(0, 217, 255, 0.5); }
    }
    
    @keyframes slideIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* Titres personnalis√©s */
    h1 {
        color: #00d9ff !important;
        animation: glow 2s ease-in-out infinite;
        font-weight: 800 !important;
        letter-spacing: 2px;
    }
    
    h2 {
        color: #00ffaa !important;
        text-shadow: 0 0 15px rgba(0, 255, 170, 0.4);
        font-weight: 700 !important;
        animation: slideIn 0.5s ease-out;
    }
    
    h3 {
        color: #4dd4ff !important;
        font-weight: 600 !important;
        text-shadow: 0 0 10px rgba(77, 212, 255, 0.3);
    }
    
    /* Sidebar */
    [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #0f1419 0%, #1a1f3a 100%);
        border-right: 2px solid rgba(0, 217, 255, 0.3);
    }
    
    /* Metrics cards avec animation */
    [data-testid="stMetricValue"] {
        color: #00d9ff !important;
        font-size: 32px !important;
        font-weight: 700 !important;
        text-shadow: 0 0 15px rgba(0, 217, 255, 0.6);
        font-family: 'Courier New', monospace !important;
        animation: slideIn 0.8s ease-out;
    }
    
    [data-testid="stMetricLabel"] {
        color: #a0aec0 !important;
        font-size: 14px !important;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    [data-testid="stMetricDelta"] {
        color: #00ffaa !important;
    }
    
    /* Container des metrics avec effet */
    [data-testid="metric-container"] {
        background: rgba(26, 31, 58, 0.6);
        border: 1px solid rgba(0, 217, 255, 0.3);
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 5px 15px rgba(0, 217, 255, 0.1);
        transition: all 0.3s ease;
    }
    
    [data-testid="metric-container"]:hover {
        border-color: rgba(0, 217, 255, 0.6);
        box-shadow: 0 8px 25px rgba(0, 217, 255, 0.3);
        transform: translateY(-2px);
    }
    
    /* Boutons */
    .stButton button {
        background: linear-gradient(135deg, #00d9ff 0%, #00ffaa 100%);
        color: #0a0e27;
        font-weight: 700;
        border: none;
        border-radius: 10px;
        padding: 10px 30px;
        box-shadow: 0 5px 15px rgba(0, 217, 255, 0.4);
        transition: all 0.3s ease;
    }
    
    .stButton button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 217, 255, 0.6);
    }
    
    /* Tables avec effet n√©on */
    [data-testid="stDataFrame"] {
        background: rgba(15, 20, 25, 0.9) !important;
        border: 2px solid rgba(0, 217, 255, 0.5);
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(0, 217, 255, 0.2);
        animation: slideIn 0.6s ease-out;
    }
    
    /* Style des cellules de tableau */
    .dataframe {
        color: #ffffff !important;
        font-family: 'Courier New', monospace;
    }
    
    .dataframe th {
        background: linear-gradient(135deg, #00d9ff 0%, #00ffaa 100%) !important;
        color: #0a0e27 !important;
        font-weight: 700 !important;
        padding: 12px !important;
        text-transform: uppercase;
        letter-spacing: 1px;
        border: none !important;
    }
    
    .dataframe td {
        background: rgba(26, 31, 58, 0.6) !important;
        color: #00d9ff !important;
        padding: 10px !important;
        border-bottom: 1px solid rgba(0, 217, 255, 0.2) !important;
        font-size: 14px !important;
        font-weight: 500 !important;
    }
    
    .dataframe tr:hover td {
        background: rgba(0, 217, 255, 0.1) !important;
        transition: all 0.3s ease;
    }
    
    /* File uploader */
    [data-testid="stFileUploader"] {
        background: rgba(26, 31, 58, 0.5);
        border: 2px dashed rgba(0, 217, 255, 0.4);
        border-radius: 15px;
        padding: 20px;
    }
    
    /* Divider */
    hr {
        border: 1px solid rgba(0, 217, 255, 0.2);
    }
    
    /* Info boxes avec effet n√©on */
    .stAlert {
        background: rgba(0, 217, 255, 0.15) !important;
        border-left: 4px solid #00d9ff;
        border-radius: 10px;
        color: #ffffff !important;
        box-shadow: 0 0 20px rgba(0, 217, 255, 0.2);
        animation: slideIn 0.6s ease-out;
    }
    
    /* Success box */
    .stSuccess {
        background: rgba(0, 255, 170, 0.15) !important;
        border-left: 4px solid #00ffaa !important;
        box-shadow: 0 0 20px rgba(0, 255, 170, 0.2);
    }
    
    /* Warning box */
    .stWarning {
        background: rgba(255, 165, 0, 0.15) !important;
        border-left: 4px solid #ffa500 !important;
        box-shadow: 0 0 20px rgba(255, 165, 0, 0.2);
    }
    
    /* Error box */
    .stError {
        background: rgba(255, 0, 102, 0.15) !important;
        border-left: 4px solid #ff0066 !important;
        box-shadow: 0 0 20px rgba(255, 0, 102, 0.2);
    }
    
    /* Texte dans les boxes */
    .stAlert p, .stSuccess p, .stWarning p, .stError p {
        color: #ffffff !important;
        font-size: 15px !important;
        font-weight: 500 !important;
    }
    
    /* Expander */
    [data-testid="stExpander"] {
        background: rgba(26, 31, 58, 0.6);
        border: 1px solid rgba(0, 217, 255, 0.3);
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Fonction pour charger les donn√©es
@st.cache_data
def load_data(file, file_type):
    try:
        if file_type == "csv":
            df = pd.read_csv(file)
        else:
            df = pd.read_excel(file)
        return df
    except Exception as e:
        st.error(f"Erreur lors du chargement du fichier : {e}")
        return None

# Fonction pour nettoyer et pr√©parer les donn√©es
def prepare_timeseries(df, date_col, value_col, freq='Y'):
    df_clean = df[[date_col, value_col]].copy()
    
    # Nettoyer les valeurs
    if df_clean[value_col].dtype == 'object':
        df_clean[value_col] = df_clean[value_col].str.replace('\xa0', '', regex=True)
        df_clean[value_col] = df_clean[value_col].str.replace(' ', '', regex=True)
        df_clean[value_col] = pd.to_numeric(df_clean[value_col], errors='coerce')
    
    # Cr√©er l'index temporel
    df_clean['Date_Index'] = pd.date_range(start=str(df_clean[date_col].iloc[0]), 
                                            periods=len(df_clean), freq=freq)
    df_clean.set_index('Date_Index', inplace=True)
    
    return df_clean

# Titre principal
st.markdown("<h1 style='text-align: center;'>üìä ANALYSE DE S√âRIE TEMPORELLE</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center; color: #a0aec0;'>M√©thode de Lissage Exponentiel Holt-Winters</h3>", unsafe_allow_html=True)
st.markdown("---")

# Sidebar
with st.sidebar:
    st.markdown("## ‚öôÔ∏è CONFIGURATION")
    st.markdown("---")
    
    # Upload fichier
    uploaded_file = st.file_uploader(
        "üìÅ Charger vos donn√©es",
        type=['csv', 'xlsx', 'xls'],
        help="Format support√©: CSV, Excel (XLSX, XLS)"
    )
    
    if uploaded_file:
        file_type = 'csv' if uploaded_file.name.endswith('.csv') else 'excel'
        df = load_data(uploaded_file, file_type)
        
        if df is not None:
            st.success("‚úÖ Fichier charg√© avec succ√®s!")
            
            st.markdown("### üéØ Param√®tres")
            
            # S√©lection des colonnes
            date_col = st.selectbox("üìÖ Colonne Date/Ann√©e", df.columns)
            value_col = st.selectbox("üí∞ Colonne Valeur", df.columns)
            
            # Fr√©quence
            freq_options = {
                'Annuelle': 'Y',
                'Trimestrielle': 'Q',
                'Mensuelle': 'M',
                'Hebdomadaire': 'W',
                'Quotidienne': 'D'
            }
            freq_label = st.selectbox("üìÜ Fr√©quence", list(freq_options.keys()))
            freq = freq_options[freq_label]
            
            # Nombre de pr√©visions
            n_forecast = st.slider("üîÆ P√©riodes √† pr√©voir", 1, 20, 4)
            
            st.markdown("---")
            analyze_btn = st.button("üöÄ LANCER L'ANALYSE", use_container_width=True)

# Corps principal
if uploaded_file and df is not None:
    
    # Pr√©parer les donn√©es
    try:
        ts_data = prepare_timeseries(df, date_col, value_col, freq)
        series = ts_data[value_col].dropna()
    except Exception as e:
        st.error(f"Erreur lors de la pr√©paration des donn√©es : {e}")
        st.stop()
    
    if 'analyze_btn' in locals() and analyze_btn:
        
        # TAB NAVIGATION
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä Exploration", 
            "üìà Statistiques", 
            "üîÑ Lissage", 
            "üîç Validation", 
            "üîÆ Pr√©vision"
        ])
        
        # TAB 1: EXPLORATION
        with tab1:
            st.markdown("## üìä EXPLORATION DES DONN√âES")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("üìè Observations", f"{len(series):,}")
            with col2:
                st.metric("üìÖ D√©but", series.index[0].strftime('%Y'))
            with col3:
                st.metric("üìÖ Fin", series.index[-1].strftime('%Y'))
            with col4:
                missing = series.isna().sum()
                st.metric("‚ùå Valeurs manquantes", f"{missing:,}")
            
            st.markdown("---")
            
            # Aper√ßu des donn√©es
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("### üìã Aper√ßu des donn√©es")
                # Formater le dataframe pour l'affichage
                display_df = ts_data.head(10).copy()
                display_df[value_col] = display_df[value_col].apply(lambda x: format_number(x))
                st.dataframe(display_df, use_container_width=True, height=400)
            
            with col2:
                st.markdown("### üìã Statistiques rapides")
                stats_df = series.describe().to_frame()
                stats_df.columns = ['Valeur']
                stats_df['Valeur'] = stats_df['Valeur'].apply(lambda x: format_number(x))
                st.dataframe(stats_df, use_container_width=True, height=400)
            
            st.markdown("---")
            
            # Graphique s√©rie temporelle
            st.markdown("### üìà √âvolution de la s√©rie temporelle")
            fig, ax = plt.subplots(figsize=(14, 6), facecolor='#0a0e27')
            ax.set_facecolor('#1a1f3a')
            ax.plot(series.index, series, color='#00d9ff', linewidth=2.5, marker='o', markersize=5)
            
            # Ajouter des annotations pour chaque d√©cennie
            start_year = series.index.min().year
            end_year = series.index.max().year
            
            for year in range(start_year, end_year + 1):
                if year % 10 == 0:  # Tous les 10 ans
                    year_data = series[series.index.year == year]
                    if not year_data.empty:
                        last_value = year_data.iloc[-1]
                        last_date = year_data.index[-1]
                        ax.annotate(f'{year}\n{last_value:,.0f}',
                                   xy=(last_date, last_value),
                                   xytext=(0, 15), 
                                   textcoords='offset points',
                                   ha='center', 
                                   fontsize=9, 
                                   color='#00ffaa',
                                   bbox=dict(boxstyle='round,pad=0.4', 
                                           facecolor='#1a1f3a', 
                                           edgecolor='#00ffaa',
                                           alpha=0.9),
                                   fontweight='bold')
            
            # Formatter l'axe Y pour afficher les nombres complets
            def format_y_axis(value, pos):
                if abs(value) >= 1e12:
                    return f'{value/1e12:.1f}T'
                elif abs(value) >= 1e9:
                    return f'{value/1e9:.1f}B'
                elif abs(value) >= 1e6:
                    return f'{value/1e6:.1f}M'
                else:
                    return f'{value:,.0f}'
            
            ax.yaxis.set_major_formatter(FuncFormatter(format_y_axis))
            
            ax.set_title("√âvolution de la s√©rie temporelle", color='white', fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel("Date", color='#a0aec0', fontsize=12)
            ax.set_ylabel("Valeur", color='#a0aec0', fontsize=12)
            ax.grid(True, linestyle='--', alpha=0.3, color='#4dd4ff')
            ax.tick_params(colors='#a0aec0')
            for spine in ax.spines.values():
                spine.set_color('#4dd4ff')
                spine.set_linewidth(2)
            plt.tight_layout()
            st.pyplot(fig)
            
            # Histogramme et Boxplot
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üìä Distribution")
                fig, ax = plt.subplots(figsize=(7, 5), facecolor='#0a0e27')
                ax.set_facecolor('#1a1f3a')
                ax.hist(series, bins=20, color='#00d9ff', edgecolor='#00ffaa', alpha=0.7)
                ax.set_title("Distribution des valeurs", color='white', fontsize=14, fontweight='bold')
                ax.set_xlabel("Valeur", color='#a0aec0')
                ax.set_ylabel("Fr√©quence", color='#a0aec0')
                ax.grid(True, alpha=0.3, color='#4dd4ff')
                ax.tick_params(colors='#a0aec0')
                for spine in ax.spines.values():
                    spine.set_color('#4dd4ff')
                plt.tight_layout()
                st.pyplot(fig)
            
            with col2:
                st.markdown("### üì¶ Boxplot")
                fig, ax = plt.subplots(figsize=(7, 5), facecolor='#0a0e27')
                ax.set_facecolor('#1a1f3a')
                bp = ax.boxplot(series, vert=True, patch_artist=True,
                                boxprops=dict(facecolor='#00d9ff', color='#00ffaa'),
                                whiskerprops=dict(color='#00ffaa'),
                                capprops=dict(color='#00ffaa'),
                                medianprops=dict(color='#ff0066', linewidth=2),
                                flierprops=dict(marker='o', markerfacecolor='#ff0066', markersize=6, alpha=0.5))
                ax.set_title("Distribution (Boxplot)", color='white', fontsize=14, fontweight='bold')
                ax.set_ylabel("Valeur", color='#a0aec0')
                ax.grid(axis='y', linestyle='--', alpha=0.3, color='#4dd4ff')
                ax.tick_params(colors='#a0aec0')
                for spine in ax.spines.values():
                    spine.set_color('#4dd4ff')
                plt.tight_layout()
                st.pyplot(fig)
        
        # TAB 2: STATISTIQUES
        with tab2:
            st.markdown("## üìà INDICES STATISTIQUES")
            
            # Indices de tendance centrale
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìä Moyenne", format_number(series.mean()))
            with col2:
                st.metric("üìä M√©diane", format_number(series.median()))
            with col3:
                st.metric("üìä √âcart-type", format_number(series.std()))
            
            st.markdown("---")
            
            # Indices de forme
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìä Variance", format_number(series.var()))
            with col2:
                kurtosis_val = kurtosis(series, bias=False)
                st.metric("üìä Kurtosis", f"{kurtosis_val:.4f}")
            with col3:
                skewness_val = skew(series, bias=False)
                st.metric("üìä Skewness", f"{skewness_val:.4f}")
            
            st.markdown("---")
            
            # ACF et PACF
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üîó Autocorr√©lation (ACF)")
                fig, ax = plt.subplots(figsize=(7, 5), facecolor='#0a0e27')
                ax.set_facecolor('#1a1f3a')
                plot_acf(series.dropna(), lags=10, alpha=0.05, ax=ax, color='#00d9ff')
                
                # Ajouter les valeurs sur le graphique ACF
                acf_values = acf(series.dropna(), nlags=10, fft=False)
                for i, v in enumerate(acf_values):
                    ax.text(i, v + 0.03, f"{v:.3f}", 
                           ha='center', va='bottom', 
                           fontsize=8, color='#00ffaa', 
                           fontweight='bold')
                
                ax.set_title("Fonction d'autocorr√©lation (ACF)", color='white', fontsize=14, fontweight='bold')
                ax.set_xlabel("Lag", color='#a0aec0')
                ax.set_ylabel("Autocorr√©lation", color='#a0aec0')
                ax.tick_params(colors='#a0aec0')
                for spine in ax.spines.values():
                    spine.set_color('#4dd4ff')
                plt.tight_layout()
                st.pyplot(fig)
            
            with col2:
                st.markdown("### üîó Autocorr√©lation Partielle (PACF)")
                fig, ax = plt.subplots(figsize=(7, 5), facecolor='#0a0e27')
                ax.set_facecolor('#1a1f3a')
                plot_pacf(series.dropna(), lags=10, alpha=0.05, ax=ax, method='ywm', color='#ff0066')
                
                # Ajouter les valeurs sur le graphique PACF
                pacf_values = pacf(series.dropna(), nlags=10, method='ywm')
                for i, v in enumerate(pacf_values):
                    ax.text(i, v + 0.03, f"{v:.3f}",
                           ha='center', va='bottom',
                           fontsize=8, color='#00ffaa',
                           fontweight='bold')
                
                ax.set_title("Fonction d'autocorr√©lation partielle (PACF)", color='white', fontsize=14, fontweight='bold')
                ax.set_xlabel("Lag", color='#a0aec0')
                ax.set_ylabel("PACF", color='#a0aec0')
                ax.tick_params(colors='#a0aec0')
                for spine in ax.spines.values():
                    spine.set_color('#4dd4ff')
                plt.tight_layout()
                st.pyplot(fig)
        
        # TAB 3: LISSAGE
        with tab3:
            st.markdown("## üîÑ LISSAGE EXPONENTIEL HOLT-WINTERS")
            
            with st.spinner("üîÑ Calcul du mod√®le en cours..."):
                # Ajuster le mod√®le
                model = ExponentialSmoothing(
                    series,
                    trend='add',
                    seasonal=None,
                    initialization_method='estimated'
                )
                fitted_model = model.fit()
                
                # Param√®tres du mod√®le
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üéØ Alpha (niveau)", f"{fitted_model.params['smoothing_level']:.5f}")
                with col2:
                    st.metric("üìà Beta (tendance)", f"{fitted_model.params['smoothing_trend']:.5f}")
                with col3:
                    st.metric("‚ùå SSE", format_number(fitted_model.sse))
                
                st.markdown("---")
                
                # Graphique de comparaison
                st.markdown("### üìä S√©rie Originale vs S√©rie Liss√©e")
                fig, ax = plt.subplots(figsize=(14, 6), facecolor='#0a0e27')
                ax.set_facecolor('#1a1f3a')
                ax.plot(series.index, series, color='#00d9ff', linewidth=2.5, marker='o', 
                        markersize=5, label='S√©rie originale', alpha=0.8)
                ax.plot(series.index, fitted_model.fittedvalues, color='#ff0066', linewidth=2.5, 
                        marker='s', markersize=4, label='S√©rie liss√©e (Holt)', alpha=0.9)
                
                # Ajouter des annotations pour chaque d√©cennie
                start_year = series.index.min().year
                end_year = series.index.max().year
                
                for year in range(start_year, end_year + 1):
                    if year % 10 == 0:  # Tous les 10 ans
                        year_mask = series.index.year == year
                        if year_mask.sum() > 0:
                            try:
                                # Annotation pour la s√©rie originale
                                last_orig_value = float(series[year_mask].iloc[-1])
                                last_orig_date = series[year_mask].index[-1]
                                ax.annotate(f'{year}\n{last_orig_value:,.0f}',
                                           xy=(last_orig_date, last_orig_value),
                                           xytext=(0, 15), 
                                           textcoords='offset points',
                                           ha='center', 
                                           fontsize=9, 
                                           color='#00d9ff',
                                           bbox=dict(boxstyle='round,pad=0.3', 
                                                   facecolor='#1a1f3a', 
                                                   edgecolor='#00d9ff',
                                                   alpha=0.9),
                                           fontweight='bold')
                                
                                # Annotation pour la s√©rie liss√©e
                                smooth_slice = fitted_model.fittedvalues[year_mask]
                                if len(smooth_slice) > 0:
                                    last_smooth_value = float(smooth_slice.iloc[-1])
                                    last_smooth_date = smooth_slice.index[-1]
                                    ax.annotate(f'{last_smooth_value:,.0f}',
                                               xy=(last_smooth_date, last_smooth_value),
                                               xytext=(0, -25), 
                                               textcoords='offset points',
                                               ha='center', 
                                               fontsize=9, 
                                               color='#ff0066',
                                               bbox=dict(boxstyle='round,pad=0.3', 
                                                       facecolor='#1a1f3a', 
                                                       edgecolor='#ff0066',
                                                       alpha=0.9),
                                               fontweight='bold')
                            except Exception:
                                continue
                
                # Formatter l'axe Y
                def format_y_axis(value, pos):
                    if abs(value) >= 1e12:
                        return f'{value/1e12:.1f}T'
                    elif abs(value) >= 1e9:
                        return f'{value/1e9:.1f}B'
                    elif abs(value) >= 1e6:
                        return f'{value/1e6:.1f}M'
                    else:
                        return f'{value:,.0f}'
                
                ax.yaxis.set_major_formatter(FuncFormatter(format_y_axis))
                
                ax.set_title("Comparaison : S√©rie Originale vs Lissage de Holt", 
                            color='white', fontsize=16, fontweight='bold', pad=20)
                ax.set_xlabel("Date", color='#a0aec0', fontsize=12)
                ax.set_ylabel("Valeur", color='#a0aec0', fontsize=12)
                ax.grid(True, linestyle='--', alpha=0.3, color='#4dd4ff')
                ax.legend(loc='upper left', facecolor='#1a1f3a', edgecolor='#00d9ff', 
                         labelcolor='white', fontsize=11)
                ax.tick_params(colors='#a0aec0')
                for spine in ax.spines.values():
                    spine.set_color('#4dd4ff')
                    spine.set_linewidth(2)
                plt.tight_layout()
                st.pyplot(fig)
        
        # TAB 4: VALIDATION
        with tab4:
            st.markdown("## üîç VALIDATION DU MOD√àLE")
            
            residus = fitted_model.resid
            
            # Graphique des r√©sidus
            st.markdown("### üìâ R√©sidus du mod√®le")
            fig, ax = plt.subplots(figsize=(14, 5), facecolor='#0a0e27')
            ax.set_facecolor('#1a1f3a')
            ax.plot(residus.index, residus, color='#ff0066', marker='.', linestyle='-', linewidth=1.5)
            ax.axhline(0, color='#00d9ff', linestyle='--', linewidth=2, alpha=0.7)
            
            # Ajouter des annotations pour certains points (max et min)
            max_resid_idx = residus.abs().idxmax()
            max_resid_val = residus[max_resid_idx]
            ax.annotate(f'Max: {max_resid_val:,.0f}',
                       xy=(max_resid_idx, max_resid_val),
                       xytext=(10, 10 if max_resid_val > 0 else -20),
                       textcoords='offset points',
                       ha='left',
                       fontsize=9,
                       color='#00ffaa',
                       bbox=dict(boxstyle='round,pad=0.3',
                               facecolor='#1a1f3a',
                               edgecolor='#00ffaa',
                               alpha=0.9),
                       fontweight='bold',
                       arrowprops=dict(arrowstyle='->', color='#00ffaa', lw=1.5))
            
            ax.set_title("R√©sidus du mod√®le de lissage exponentiel", 
                        color='white', fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel("Date", color='#a0aec0')
            ax.set_ylabel("R√©sidu", color='#a0aec0')
            ax.grid(True, alpha=0.3, color='#4dd4ff')
            ax.tick_params(colors='#a0aec0')
            for spine in ax.spines.values():
                spine.set_color('#4dd4ff')
                spine.set_linewidth(2)
            plt.tight_layout()
            st.pyplot(fig)
            
            st.markdown("---")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Test de Ljung-Box
                st.markdown("### üß™ Test de Ljung-Box (Bruit Blanc)")
                residus_clean = residus.dropna()
                lb_test = acorr_ljungbox(residus_clean, lags=[20], return_df=True)
                
                # Formater le tableau
                lb_display = lb_test.copy()
                lb_display.columns = ['Statistique LB', 'P-value']
                lb_display['Statistique LB'] = lb_display['Statistique LB'].apply(lambda x: f"{x:.4f}")
                lb_display['P-value'] = lb_display['P-value'].apply(lambda x: f"{x:.6f}")
                
                st.dataframe(lb_display, use_container_width=True)
                
                p_value_lb = lb_test['lb_pvalue'].values[0]
                if p_value_lb > 0.05:
                    st.success(f"‚úÖ P-value = {p_value_lb:.6f} > 0.05 : La s√©rie est un bruit blanc")
                else:
                    st.warning(f"‚ö†Ô∏è P-value = {p_value_lb:.6f} < 0.05 : La s√©rie n'est pas un bruit blanc")
            
            with col2:
                # Test de normalit√©
                st.markdown("### üß™ Test de Shapiro-Wilk (Normalit√©)")
                if len(residus_clean) < 5000:
                    stat, p_value_shapiro = shapiro(residus_clean)
                    
                    result_df = pd.DataFrame({
                        'M√©trique': ['Statistique', 'P-value'],
                        'Valeur': [f"{stat:.6f}", f"{p_value_shapiro:.6f}"]
                    })
                    st.dataframe(result_df, use_container_width=True, hide_index=True)
                    
                    if p_value_shapiro > 0.05:
                        st.success(f"‚úÖ P-value = {p_value_shapiro:.6f} > 0.05 : Distribution normale")
                    else:
                        st.warning(f"‚ö†Ô∏è P-value = {p_value_shapiro:.6f} < 0.05 : Distribution non normale")
            
            st.markdown("---")
            
            # Distribution des r√©sidus
            st.markdown("### üìä Distribution des r√©sidus")
            fig, ax = plt.subplots(figsize=(14, 5), facecolor='#0a0e27')
            ax.set_facecolor('#1a1f3a')
            n, bins, patches = ax.hist(residus.dropna(), bins=20, color='#00d9ff', 
                                        edgecolor='white', alpha=0.7, density=True)
            mean_resid = residus.mean()
            ax.axvline(mean_resid, color='#ff0066', linestyle='--', linewidth=2, 
                      label=f'Moyenne = {format_number(mean_resid)}')
            ax.set_title("Distribution des r√©sidus", color='white', fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel("Valeur des r√©sidus", color='#a0aec0')
            ax.set_ylabel("Densit√©", color='#a0aec0')
            ax.legend(facecolor='#1a1f3a', edgecolor='#00d9ff', labelcolor='white')
            ax.grid(True, alpha=0.3, color='#4dd4ff')
            ax.tick_params(colors='#a0aec0')
            for spine in ax.spines.values():
                spine.set_color('#4dd4ff')
                spine.set_linewidth(2)
            plt.tight_layout()
            st.pyplot(fig)
            
            # M√©trique moyenne des r√©sidus
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìä Moyenne des r√©sidus", format_number(residus.mean()))
            with col2:
                st.metric("üìä √âcart-type des r√©sidus", format_number(residus.std()))
            with col3:
                st.metric("üìä Max |R√©sidu|", format_number(abs(residus).max()))
        
        # TAB 5: PR√âVISION
        with tab5:
            st.markdown("## üîÆ PR√âVISIONS")
            
            with st.spinner("üîÆ Calcul des pr√©visions..."):
                # Calculer les pr√©visions
                forecast = fitted_model.forecast(steps=n_forecast)
                
                # Intervalle de confiance
                residuals = fitted_model.resid
                sigma = np.sqrt(np.mean(residuals**2))
                h = np.arange(1, n_forecast + 1)
                se_forecast = sigma * np.sqrt(h)
                z = norm.ppf(0.975)
                lower = forecast - z * se_forecast
                upper = forecast + z * se_forecast
                
                # Afficher les pr√©visions
                st.markdown("### üìã Tableau des pr√©visions")
                forecast_df = pd.DataFrame({
                    'Date': forecast.index.strftime('%Y-%m-%d'),
                    'Pr√©vision': forecast.values,
                    'IC Inf√©rieur (95%)': lower.values,
                    'IC Sup√©rieur (95%)': upper.values
                })
                
                # Formater les valeurs num√©riques
                for col in ['Pr√©vision', 'IC Inf√©rieur (95%)', 'IC Sup√©rieur (95%)']:
                    forecast_df[col] = forecast_df[col].apply(lambda x: format_number(x))
                
                st.dataframe(forecast_df, use_container_width=True, hide_index=True, height=250)
                
                st.markdown("---")
                
                # Graphique des pr√©visions
                st.markdown("### üìà Visualisation des pr√©visions")
                fig, ax = plt.subplots(figsize=(14, 6), facecolor='#0a0e27')
                ax.set_facecolor('#1a1f3a')
                
                # S√©rie historique
                ax.plot(series.index, series, color='#00d9ff', linewidth=2.5, marker='o', 
                        markersize=5, label='Donn√©es historiques', alpha=0.8)
                
                # Pr√©visions
                ax.plot(forecast.index, forecast, color='#00ffaa', linewidth=3, marker='s', 
                        markersize=7, label=f'Pr√©visions ({n_forecast} p√©riodes)', 
                        linestyle='--', alpha=0.9)
                
                # Intervalle de confiance
                ax.fill_between(forecast.index, lower, upper, color='#ff0066', 
                               alpha=0.2, label='Intervalle de confiance 95%')
                
                # Ligne de s√©paration
                ax.axvline(x=series.index[-1], color='gray', linestyle='--', linewidth=1.5, alpha=0.7)
                ax.text(series.index[-1], plt.ylim()[1]*0.95, 'Pr√©visions ‚Üí',
                       ha='right', va='top', fontsize=11, color='gray', fontweight='bold')
                
                # Ajouter des annotations pour les pr√©visions
                for i, (date, value) in enumerate(zip(forecast.index, forecast)):
                    ax.annotate(f'{value:,.0f}',
                               xy=(date, value),
                               xytext=(0, 10),
                               textcoords='offset points',
                               ha='center',
                               fontsize=9,
                               color='#00ffaa',
                               bbox=dict(boxstyle='round,pad=0.3',
                                       facecolor='#1a1f3a',
                                       edgecolor='#00ffaa',
                                       alpha=0.9),
                               fontweight='bold')
                
                # Ajouter annotation pour la derni√®re valeur historique
                last_hist_value = series.iloc[-1]
                last_hist_date = series.index[-1]
                ax.annotate(f'Derni√®re valeur\n{last_hist_value:,.0f}',
                           xy=(last_hist_date, last_hist_value),
                           xytext=(-30, 20),
                           textcoords='offset points',
                           ha='right',
                           fontsize=9,
                           color='#00d9ff',
                           bbox=dict(boxstyle='round,pad=0.3',
                                   facecolor='#1a1f3a',
                                   edgecolor='#00d9ff',
                                   alpha=0.9),
                           fontweight='bold',
                           arrowprops=dict(arrowstyle='->', color='#00d9ff', lw=1.5))
                
                # Formatter l'axe Y
                def format_y_axis(value, pos):
                    if abs(value) >= 1e12:
                        return f'{value/1e12:.1f}T'
                    elif abs(value) >= 1e9:
                        return f'{value/1e9:.1f}B'
                    elif abs(value) >= 1e6:
                        return f'{value/1e6:.1f}M'
                    else:
                        return f'{value:,.0f}'
                
                ax.yaxis.set_major_formatter(FuncFormatter(format_y_axis))
                
                ax.set_title("Pr√©visions avec Intervalle de Confiance 95%", 
                            color='white', fontsize=16, fontweight='bold', pad=20)
                ax.set_xlabel("Date", color='#a0aec0', fontsize=12)
                ax.set_ylabel("Valeur", color='#a0aec0', fontsize=12)
                ax.grid(True, linestyle='--', alpha=0.3, color='#4dd4ff')
                ax.legend(loc='upper left', facecolor='#1a1f3a', edgecolor='#00d9ff', 
                         labelcolor='white', fontsize=11)
                ax.tick_params(colors='#a0aec0')
                for spine in ax.spines.values():
                    spine.set_color('#4dd4ff')
                    spine.set_linewidth(2)
                plt.tight_layout()
                st.pyplot(fig)
                
                st.markdown("---")
                
                # M√©triques des pr√©visions
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("üéØ Premi√®re pr√©vision", format_number(forecast.iloc[0]))
                with col2:
                    st.metric("üéØ Derni√®re pr√©vision", format_number(forecast.iloc[-1]))
                with col3:
                    growth = ((forecast.iloc[-1] - series.iloc[-1]) / series.iloc[-1]) * 100
                    st.metric("üìà Croissance pr√©vue", f"{growth:.2f}%")
                with col4:
                    avg_forecast = forecast.mean()
                    st.metric("üìä Moyenne pr√©visions", format_number(avg_forecast))

else:
    # Message d'accueil
    st.markdown("""
    <div style='text-align: center; padding: 50px; background: rgba(26, 31, 58, 0.5); 
                border-radius: 20px; border: 2px solid rgba(0, 217, 255, 0.3);'>
        <h2 style='color: #00d9ff;'>üëã Bienvenue dans l'application d'analyse de s√©ries temporelles</h2>
        <p style='color: #a0aec0; font-size: 18px; margin-top: 20px;'>
            Utilisez le panneau lat√©ral pour charger vos donn√©es et commencer l'analyse
        </p>
        <br>
        <div style='display: flex; justify-content: center; gap: 30px; margin-top: 30px;'>
            <div style='background: rgba(0, 217, 255, 0.1); padding: 20px; border-radius: 10px; 
                        border: 1px solid rgba(0, 217, 255, 0.3); width: 200px;'>
                <h3 style='color: #00d9ff; margin-bottom: 10px;'>üìÅ √âtape 1</h3>
                <p style='color: #a0aec0; font-size: 14px;'>Chargez votre fichier CSV ou Excel</p>
            </div>
            <div style='background: rgba(0, 255, 170, 0.1); padding: 20px; border-radius: 10px; 
                        border: 1px solid rgba(0, 255, 170, 0.3); width: 200px;'>
                <h3 style='color: #00ffaa; margin-bottom: 10px;'>‚öôÔ∏è √âtape 2</h3>
                <p style='color: #a0aec0; font-size: 14px;'>Configurez les param√®tres d'analyse</p>
            </div>
            <div style='background: rgba(255, 0, 102, 0.1); padding: 20px; border-radius: 10px; 
                        border: 1px solid rgba(255, 0, 102, 0.3); width: 200px;'>
                <h3 style='color: #ff0066; margin-bottom: 10px;'>üöÄ √âtape 3</h3>
                <p style='color: #a0aec0; font-size: 14px;'>Lancez l'analyse et explorez les r√©sultats</p>
            </div>
        </div>
        <br><br>
        <div style='background: rgba(0, 217, 255, 0.05); padding: 25px; border-radius: 15px; 
                    border-left: 4px solid #00d9ff; margin-top: 40px; text-align: left;'>
            <h3 style='color: #00d9ff; margin-bottom: 15px;'>üìö Fonctionnalit√©s de l'application :</h3>
            <ul style='color: #a0aec0; font-size: 16px; line-height: 2;'>
                <li>‚úÖ <strong style='color: #00ffaa;'>Exploration des donn√©es</strong> : Visualisation compl√®te de votre s√©rie temporelle</li>
                <li>‚úÖ <strong style='color: #00ffaa;'>Analyses statistiques</strong> : Indices de tendance, dispersion, forme et d√©pendance</li>
                <li>‚úÖ <strong style='color: #00ffaa;'>Lissage Holt-Winters</strong> : Mod√©lisation avec lissage exponentiel</li>
                <li>‚úÖ <strong style='color: #00ffaa;'>Validation du mod√®le</strong> : Tests statistiques (Ljung-Box, Shapiro-Wilk)</li>
                <li>‚úÖ <strong style='color: #00ffaa;'>Pr√©visions</strong> : Projections futures avec intervalles de confiance</li>
            </ul>
        </div>
        <br>
        <div style='margin-top: 30px; padding: 20px; background: rgba(255, 0, 102, 0.05); 
                    border-radius: 10px; border: 1px solid rgba(255, 0, 102, 0.3);'>
            <h4 style='color: #ff0066;'>üí° Format des donn√©es attendu :</h4>
            <p style='color: #a0aec0; font-size: 14px; margin-top: 10px;'>
                ‚Ä¢ Une colonne contenant les dates ou ann√©es<br>
                ‚Ä¢ Une colonne contenant les valeurs num√©riques √† analyser<br>
                ‚Ä¢ Format accept√© : CSV, XLSX, XLS
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Exemple de donn√©es
    st.markdown("---")
    st.markdown("### üìä Exemple de structure de donn√©es attendue")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### ‚úÖ Format acceptable")
        example_data = pd.DataFrame({
            'DATE': [1960, 1961, 1962, 1963, 1964],
            'GDP': [541988586207, 561940310345, 603639413793, 637058551724, 684144620690]
        })
        st.dataframe(example_data, use_container_width=True)
    
    with col2:
        st.markdown("#### üìù Description")
        st.markdown("""
        <div style='background: rgba(26, 31, 58, 0.5); padding: 20px; border-radius: 10px; 
                    border: 1px solid rgba(0, 217, 255, 0.3); height: 180px;'>
            <p style='color: #a0aec0; font-size: 14px; line-height: 1.8;'>
                <strong style='color: #00d9ff;'>‚Ä¢ DATE :</strong> Colonne temporelle (ann√©es, dates)<br>
                <strong style='color: #00d9ff;'>‚Ä¢ GDP :</strong> Valeurs num√©riques √† analyser<br><br>
                <em style='color: #00ffaa;'>Les valeurs peuvent contenir des espaces ou caract√®res sp√©ciaux, 
                l'application les nettoiera automatiquement.</em>
            </p>
        </div>
        """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; padding: 30px; margin-top: 50px;'>
    <p style='color: #4dd4ff; font-size: 14px;'>
        üöÄ D√©velopp√© avec Streamlit | üìä Analyse de S√©ries Temporelles | üî¨ M√©thode Holt-Winters
    </p>
    <p style='color: #a0aec0; font-size: 12px; margin-top: 10px;'>
        Powered by Python, Pandas, Statsmodels & Matplotlib
    </p>
</div>
""", unsafe_allow_html=True)